
=============================================================

#字典扁平化
d = {'a':{'b':1,'c':2},'d':{'e':3,'f':{'g':4}}}
#递归实现树的遍历
lst = []

def recur(d,str1 = '',num = 0):
    for i in d.keys():
        if type(d[i]) == dict:
            recur(d[i],str1+'.'+str(i))
        else:
            num = d[i]
            lst.append((str1+'.'+str(i),num))
recur(d)
lst
new_d = {}
for i in lst:
    new_d[i[0][1:]] = new_d.get(i[0][1:],0) + i[1]
new_d

#better one: 通过返回值拿到目标更好，少用全局的变量
target={}
def flatmap(src,prefix = ''):
    for k,v in src.items():
        if isinstance(v,(dict,)):
            prefix = prefix + k + '.'
            flatmap(v,prefix)
        else:
            target[prefix + k] = v
    return target
flatmap(d)

=======================================================
最长公共子串
a = 'The winter is coming'
b = 'Without sacrifice, bright future shall never come'

max_number=0
the_string=''

def find(s1,s2,i,j,len_s1,len_s2):
    max_string = s1[i]
    count =1
    global max_number
    global the_string
    while True:
        i +=1
        j +=1
        if len_s1>i and len_s2 >j and s1[i] == s2[j]:
            max_string += s1[i]
        else:
            if len(max_string)>= max_number:
                the_string = max_string
                max_number = len(max_string) 
            break
            
for i in range(len(a)):
    for j in range((len(b))):
        if a[i] == b[j]:
            find(a,b,i,j,len(a),len(b))
the_string
                
                
=======================================================
前十单词统计

str1 = ‘On Unix and Windows, return the argument with an initial component of ~ or ~user replaced by that user‘s home directory.

On Unix, an initial ~ is replaced by the environment variable HOME if it is set; otherwise the current user’s home directory is looked up in the password directory through the built-in module pwd. An initial ~user is looked up directly in the password directory.

On Windows, HOME and USERPROFILE will be used if set, otherwise a combination of HOMEPATH and HOMEDRIVE will be used. An initial ~user is handled by stripping the last directory component from the created user path derived above.
’


def count_str(str2):
    d = {}
    ctr = 1
    count =0
    for i in range(len(str2)):
        if str2[i].isalpha():
            ctr = 1
            count +=1
        if (not str2[i].isalpha()) and ctr == 1:
            new_str = str2[i-count:i]
            d[new_str] = d.get(new_str,0) +1
            count = 0
            ctr =0
    return d
diction = count_str(str1)
sorted([(k,v) for k,v in diction.items()],key = lambda x: x[1],reverse = True)[:9]
