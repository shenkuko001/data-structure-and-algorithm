#非原地修改
def rotate1(nums,k):
    lst = [1,2,3,4,5,6,7]
    k = 3
    lst = lst[-3:] + lst[:-3]

#原地修改
lst = [1,2]
def rotate(nums, k):
    k %= len(nums)
    if k != 0:
        nums[:k], nums[k:] = nums[-k:], nums[:-k]
    return nums
rotate(lst,0)

===================================================

#fine the number which is not reduplicated
def singleNumber(nums):
    d= {}
    for i in nums:
        if i not in d.keys():
            d[i] = 0
        else:
            d[i] += 1
    for k,v in d.items():
        if v==0:
            return k
        
# better one 。 testify the difference of time expenditure
def singleNumber2(self, nums):
    dic = {}
    for num in nums:
        dic[num] = dic.get(num, 0)+1
    for key, val in dic.items():
        if val == 1:
            return key




================================================================
#return intersection between two lists.
l = [1,1,2,2,2]
l2 = [1,1,1,2,3,3,3,3,3]
d1={}
d2={}
for i in l:
    d1[i] = d1.get(i,0) + 1
for j in l2:
    d2[j] = d2.get(j,0)+1
s = d.keys()&d2.keys()
l = []
for i in s:
    print(i)
    l2 = [int(i)]*min(d1[i],d2[i])
    l += l2
# to prove it , can only create one dict

======================================================
#[1,2,3,4]
#return 1235

def plusOne (digits):
    if digits[0] == 0:
        return [1]
    s=''
    for i in digits:
        s += str(i)
    num = int(s) + 1
    digits = list(str(num))
    for i in range(len(digits)):
        digits[i] = int(digits[i])
    return digits
    
 ================================================================   
'''给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]
说明:
必须在原数组上操作，不能拷贝额外的数组。
尽量减少操作次数。'''

l = [0,1,0,3,12]

l2=0
while True:
    try:
        l.remove(0)
        l2 += 1
    except ValueError:
        for i in range(l2):
            l.append(0)
        break
# better one
def moveZeroes1(nums):
    print(id(nums))
    count=nums.count(0)
    nums[:]=[i for i in nums if i != 0]
    nums+=[0]*count
    print(id(nums))
moveZeroes1(l)


========================================================
def twoSum(nums, target):
    l= []
    for i in range(len(nums)-1):
        for j in range(i+1,len(nums)):
            if nums[i] + nums[j] == target:
                return [i,j] 
twoSum([2,7,11,15],9)
=======================================================
'''定一个 n × n 的二维矩阵表示一个图像。

将图像顺时针旋转 90 度。

说明：

你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。

示例 1:'''
matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
]

def rotate(self, matrix):
    for i in range(len(matrix)):
        for j in range(i,len(matrix)):
            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
    for l in matrix:
        l.reverse()
        
# rotate matrix can via i，j interchange，or using reverse 
